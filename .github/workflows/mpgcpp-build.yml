name: C/C++ CI

on:
  push:
    branches: [ "main" ]
    tag:
      - workflow
  pull_request:
    branches: [ "main" ]
    tags-ignore:
      - skip-workflow

jobs:
  cpp_build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: Clone Project
        with:
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v4.5.0
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: "${{env.PYTHON_VERSION}}"
          # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
          cache: pip
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: ${{env.ARCH}}
          # Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
          #        token: # optional, default is ${{ github.token }}
          # Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.
          #        cache-dependency-path: # optional
      - name: Install GCC
        # You may pin to the exact commit or the version.
        # uses: egor-tensin/setup-gcc@eaa888eb19115a521fa72b65cd94fe1f25bbcaac
        uses: egor-tensin/setup-gcc@v1
        with:
          # GCC version to install
          version: latest
          # Target platform
          platform: ${{env.ARCH}}
      - name: Cache Boost
        uses: actions/cache@v2
        with:
          path: '${{ runner.workspace }}/boost_*.tar.gz'
          key: 'boost-src'
      - name: Build Boost
        id: boost
        # You may pin to the exact commit or the version.
        # uses: egor-tensin/build-boost@6e787373b50fd7c2ddb99f85d4e472061ff54ba8
        uses: egor-tensin/build-boost@v1
        with:
          # Version to build
          version: "${{env.BOOST_VERSION}}"
          # Space-separated list of libraries
          libraries: filesystem program_options iostreams date_time mpi python log
          # Toolset to use
          toolset: auto # optional, default is auto
          # Target platform
          platform: ${{env.ARCH}}
          # Configuration to build
          configuration: Release
          # Build static libraries
          static: 0 # optional, default is 0
          # Link to the static runtime
          static-runtime: 0 # optional, default is 0
          # Destination directory
          #        directory: /usr/local
      - name: Create Build & Target directories
        run: mkdir build target
      - name: CMake Action
        # You may pin to the exact commit or the version.
        # uses: threeal/cmake-action@5be43ab87eca44c04ccf84cacaa967009ec77d12
        uses: threeal/cmake-action@v1.1.0
        with:
          # Source directory of the CMake project
          source-dir: mpgcpp
          # Build directory of the CMake project
          build-dir: build
          # List of build targets
          targets: install
          # If enabled, run testing using CTest (true/false)
          run-test: true
          # Build system generator of the CMake project
          #        generator: make
          # Preferred executable for compiling C language files
          c-compiler: ${{env.CC}}
          # Preferred executable for compiling C++ language files
          cxx-compiler: $${{env.CXX}}
          # Additional flags passed when compiling C language files
          #        c-flags: # optional
          # Additional flags passed when compiling C++ language files
          #        cxx-flags: # optional
          # Additional arguments passed during the CMake configuration
          args: -D "BOOST_ROOT=${{ steps.boost.outputs.root }}"  -D "BOOST_LIBRARYDIR=${{ steps.boost.outputs.librarydir }}"
          # Additional arguments passed during the CTest run
          #        test-args: # optional
      - name: Installing Boost libraries
        run: cp -r ${{ steps.boost.outputs.librarydir }} mpg/wrapper
      - uses: actions/upload-artifact@v3
        with:
          name: cpp-wrapper
          path: mpg
  python_build:
    runs-on: ubuntu-latest
    needs: [cpp_build] 
    steps:
      - uses: actions/checkout@v3
        name: Clone Project
        with:
          submodules: recursive
      - uses: actions/download-artifact@v3
        name: Installing Generated Wrapper
        with:
          name: cpp-wrapper
          path: mpg
      - name: Setup Python
        uses: actions/setup-python@v4.5.0
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: "${{env.PYTHON_VERSION}}"
          # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
          cache: pip
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: ${{env.ARCH}}
          # Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
          #        token: # optional, default is ${{ github.token }}
          # Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.
          #        cache-dependency-path: # optional
      - name: Installing dependencies
        run: pip install -r mpg/requirements.txt      
      - name: Installing pytest
        run: pip install pytest
      - name: Testing MPG project
        run: pytest
        working-directory: ./mpg
        env: 
          LD_LIBRARY_PATH: "${{github.workspace}}/mpg/wrapper/lib:${{github.workspace}}/mpg/wrapper/lib64"